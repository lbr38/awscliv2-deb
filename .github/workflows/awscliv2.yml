name: Build awscliv2 DEB package

on:
  push:
    branches: [ main ]

# on:
#   schedule:
#     # Runs at 00:00 every day
#     - cron: '0 0 * * *'

jobs:
  build-deb:
    runs-on: ubuntu-latest
    container:
      image: debian:11
      options: --user root
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Retrieve latest release version
      #   id: latest_release
      #   uses: pozetroninc/github-action-get-latest-release@master
      #   with:
      #     repository: ${{ github.repository }}

      # - name: Latest release is ${{ steps.latest_release.outputs.release }}
      #   run: echo "Latest release is ${{ steps.latest_release.outputs.release }}"

      - name: Install dependencies
        run: |
          apt-get update -y
          apt-get install curl unzip -y
      
      - name: Download awscliv2 source
        run: |
          cd $HOME
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"

      - name: Extract awscliv2
        run: |
          cd $HOME
          unzip awscliv2.zip

      - name: Install awscliv2
        run: |
          ls -l $HOME
          ls -l $HOME/aws
          chmod +x $HOME/aws/install
          bash $HOME/aws/install
  
      - name: Retrieve awscliv2 version
        run: |
          VERSION=$(/usr/local/bin/aws --version | awk '{print $1}' | awk -F'/' '{print $2}')
          echo "Version: $VERSION"
          echo "AWSCLI_VERSION=$VERSION" >> $GITHUB_ENV
          echo "$VERSION" > /tmp/version

      # If latest release version is the same as awscliv2 version, then skip build
      # - name: Check if latest release version is the same as actual awscliv2 version
      #   run: |
      #     if [ "${{ steps.latest_release.outputs.release }}" == "${{ env.AWSCLI_VERSION }}" ]; then
      #       echo "Latest release version is the same as awscliv2 version, skip build"
      #       exit 1
      #     fi

      - name: Install build packages
        run: apt-get install build-essential binutils lintian debhelper dh-make devscripts -y

      - name: Setup build environment
        run: |
          mkdir -p /tmp/awscliv2-build/DEBIAN
          mkdir -p /tmp/awscliv2-build/usr/local/aws-cli

      - name: Copy files to include in the build
        run: |
          cp -r /usr/local/aws-cli/* /tmp/awscliv2-build/usr/local/aws-cli

      - name: Copy control file
        run: |
          cp ${GITHUB_WORKSPACE}/.github/workflows/packaging/control /tmp/awscliv2-build/DEBIAN/control
          sed -i "s/__VERSION__/${{ env.AWSCLI_VERSION }}/g" /tmp/awscliv2-build/DEBIAN/control

      - name: Copy preinst and postinst script
        run: |
#         cp ${GITHUB_WORKSPACE}/.github/workflows/packaging/deb/preinst /tmp/awscliv2-build/DEBIAN/preinst
          cp ${GITHUB_WORKSPACE}/.github/workflows/packaging/deb/postinst /tmp/awscliv2-build/DEBIAN/postinst
          chmod 755 /tmp/awscliv2-build/DEBIAN/preinst /tmp/awscliv2-build/DEBIAN/postinst

      - name: Build package
        run: |
          cd /tmp
          dpkg-deb --build awscliv2-build
          mv /tmp/awscliv2-build.deb /tmp/awscliv2_${{ env.AWSCLI_VERSION }}.deb
          PACKAGE=$(ls -A1 *.deb)
          echo "PACKAGE=${PACKAGE}" >> $GITHUB_ENV

      - name: Upload version as artifact
        uses: actions/upload-artifact@v3
        with:
          name: version
          path: /tmp/version
          retention-days: 1
        
      - name: Upload DEB as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE }}
          path: /tmp/${{ env.PACKAGE }}
          retention-days: 1

  #
  # Test on Debian 11
  #
  test-on-debian11:
    needs:
      - build-deb
    runs-on: ubuntu-latest
    container:
      image: debian:11
      options: --user root
    steps:   
      - name: Retrieve awscliv2 deb package
        uses: actions/download-artifact@v3
        with:
          path: ~/assets

      - name: Install awscliv2
        run: atp-get install ~/assets/*/*.deb -y

  #
  # Test on Debian 12
  #
  test-on-debian12:
    needs:
      - build-deb
    runs-on: ubuntu-latest
    container:
      image: debian:12
      options: --user root
    steps:   
      - name: Retrieve awscliv2 deb package
        uses: actions/download-artifact@v3
        with:
          path: ~/assets

      - name: Install awscliv2
        run: atp-get install ~/assets/*/*.deb -y

  #
  # Create release
  #
  # release:
  #   needs:
  #     - build-deb
  #     - test-on-debian11
  #     - test-on-debian12
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Download builded packages artifacts
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         path: ~/assets

  #     # Move all deb packages to deb folder and retrieve awscliv2 version
  #     - name: Retrieve awscliv2 version from artifact
  #       run: |
  #         mkdir -p ~/assets/deb
  #         mv ~/assets/*/*.deb ~/assets/deb/
  #         VERSION=$(cat ~/assets/version/version)
  #         echo "AWSCLI_VERSION=$VERSION" >> $GITHUB_ENV

  #     - name: Create release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ env.AWSCLI_VERSION }}
  #         release_name: ${{ env.AWSCLI_VERSION }}
  #         body: |
  #           Automatic DEB build for **awscliv2** version ${{ env.AWSCLI_VERSION }}
  #         draft: false
  #         prerelease: false

  #     # Upload packages to release
  #     - name: Upload packages
  #       id: upload-release-assets
  #       uses: dwenegar/upload-release-assets@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         release_id: ${{ steps.create_release.outputs.id }}
  #         assets_path: ~/assets/deb
